/* Tasks 1-3: Data Exploration

Task 1 shows the complete table structure
Task 2 lists all unique neighborhoods
Task 3 lists all cuisine types available

Tasks 4-8: Filtering Data

Task 4 finds Chinese restaurants for takeout
Task 5 gets highly-rated restaurants (4+ stars)
Task 6 finds fancy Italian restaurants ($$$)
Task 7 uses LIKE with wildcards to find restaurants with "meatball" in the name
Task 8 uses multiple OR conditions for specific neighborhoods

Tasks 9-11: Advanced Queries

Task 9 finds restaurants with pending health grades using IS NULL
Task 10 creates a top 10 ranking ordered by review score
Task 11 uses CASE statements to categorize restaurants by rating

Bonus SQLite Queries
I've also included some additional useful queries for analyzing the data:

Restaurant counts by neighborhood
Average reviews by cuisine type
Price distribution analysis
Best restaurant in each neighborhood

To run these in SQLite format, you can:

Save the queries to a .sql file
Use SQLite command line: sqlite3 your_database.db < queries.sql
Or run them individually in your SQLite environment */
-- New York Restaurants Database Queries
-- Working with the 'nomnom' table

-- Task 1: Get a feel for the nomnom table
-- This will show all columns and data structure
SELECT *
FROM nomnom;

-- The typical columns in a restaurant database would be:
-- name, neighborhood, cuisine, review, price, health

-- Task 2: Find distinct neighborhoods
SELECT DISTINCT neighborhood
FROM nomnom
ORDER BY neighborhood;

-- Task 3: Find distinct cuisine types
SELECT DISTINCT cuisine
FROM nomnom
ORDER BY cuisine;

-- Task 4: Find Chinese takeout options
SELECT *
FROM nomnom
WHERE cuisine = 'Chinese';

-- Task 5: Find restaurants with reviews of 4 and above
SELECT *
FROM nomnom
WHERE review >= 4
ORDER BY review DESC;

-- Task 6: Find Italian restaurants that are expensive ($$$)
SELECT *
FROM nomnom
WHERE cuisine = 'Italian' 
  AND price = '$$$';

-- Task 7: Find restaurant containing 'meatball' in the name
SELECT *
FROM nomnom
WHERE name LIKE '%meatball%';

-- Task 8: Find restaurants in Midtown, Downtown, or Chinatown
SELECT *
FROM nomnom
WHERE neighborhood = 'Midtown' 
   OR neighborhood = 'Downtown' 
   OR neighborhood = 'Chinatown';

-- Alternative syntax using IN:
-- SELECT * FROM nomnom WHERE neighborhood IN ('Midtown', 'Downtown', 'Chinatown');

-- Task 9: Find restaurants with pending health grades (empty values)
SELECT *
FROM nomnom
WHERE health IS NULL 
   OR health = '';

-- Task 10: Create Top 10 Restaurants Ranking based on reviews
SELECT name, neighborhood, cuisine, review, price
FROM nomnom
WHERE review IS NOT NULL
ORDER BY review DESC
LIMIT 10;

-- Task 11: Use CASE statement to create rating system
SELECT name, 
       neighborhood, 
       cuisine, 
       review,
       CASE 
           WHEN review > 4.5 THEN 'Extraordinary'
           WHEN review > 4 THEN 'Excellent'
           WHEN review > 3 THEN 'Good'
           WHEN review > 2 THEN 'Fair'
           ELSE 'Poor'
       END AS rating_category
FROM nomnom
ORDER BY review DESC;

-- Task 12: Additional useful queries for SQLite format

-- Count restaurants by neighborhood
SELECT neighborhood, COUNT(*) as restaurant_count
FROM nomnom
GROUP BY neighborhood
ORDER BY restaurant_count DESC;

-- Average review by cuisine type
SELECT cuisine, 
       ROUND(AVG(review), 2) as avg_review,
       COUNT(*) as restaurant_count
FROM nomnom
WHERE review IS NOT NULL
GROUP BY cuisine
ORDER BY avg_review DESC;

-- Price distribution
SELECT price, COUNT(*) as count
FROM nomnom
GROUP BY price
ORDER BY price;

-- Best reviewed restaurant in each neighborhood
SELECT neighborhood, name, review, cuisine
FROM nomnom n1
WHERE review = (
    SELECT MAX(review) 
    FROM nomnom n2 
    WHERE n2.neighborhood = n1.neighborhood
)
ORDER BY neighborhood;
